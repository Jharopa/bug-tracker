name: "CI/CD Pipeline"

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - main
      - dev
  workflow_dispatch:

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: read
      statuses: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Super-linter
        uses: super-linter/super-linter@v6.3.0
        env:
          VALIDATE_ALL_CODEBASE: true
          VALIDATE_PYTHON: true
          VALIDATE_CHECKOV: false
          VALIDATE_PYTHON_PYLINT: false
          VALIDATE_PYTHON_FLAKE8: false
          VALIDATE_HTML: false
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build job: Includes setting up python and running tests
  build:
    name: Build
    needs: [ lint ]
    runs-on: ubuntu-latest
    strategy:
        matrix:
          python-version: [3.11]

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
      # Setup python on runner with setup-python action
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      # Install python package requirements via requirements.txt
      - name: Install requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r ./bug_tracker/requirements.txt
      # Run Django's test command (doubles as a build as well)
      - name: Run tests
        env:
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY_TESTS }}
        run: |
          python ./bug_tracker/manage.py test users

  analyze:
    name: Analyze
    needs: [ build ]
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      security-events: write

      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        config-file: configs/workflows/codeql.yml

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  development:
    name: Deploy to development
    if: github.event_name == 'pull_request'
    needs: [ analyze ]
    uses: ./.github/workflows/_deployment.yml
    with:
      environment: Development
    secrets: inherit

  production:
    name: Deploy to production
    if: github.event.ref == 'refs/heads/main'
    needs: [ analyze ]
    uses: ./.github/workflows/_deployment.yml
    with:
      environment: Production
    secrets: inherit
